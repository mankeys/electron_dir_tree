<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>Hello World!</title>
    <script type="text/javascript" src="./js/jquery-1.9.1.min.js"></script>
    <script type="text/javascript" src="./js/jquery.yakutree.js"></script>
    <script type="text/javascript" src="http://code.jquery.com/ui/1.11.0/jquery-ui.js"></script>
    <!-- 팝업레이어용 -->
    <script>
        const {
            app,
            BrowserWindow,
            Dialog
        } = require('electron');

        let gDebug = true;
        let sortedFolderList = [];
        const fs = require('fs'); // Load the File System to execute our common tasks (CRUD)

        $(function() {
            setFolderList();
            console.log($('.root').text());

        });

        function printFile() {
            let filenm = 'package.json';
            fs.readFile(filenm, 'utf8', function(err, data) {
                if (err) {
                    return console.log('err', err);
                } else {
                    console.log(data);
                }
            })
        }


        function setFolderList() {
            var mDir = process.cwd(); //'E:\\'
            var idx = 0;
            fs.readdir(mDir, (err, dirs) => {
                for (let dir of dirs) {
                    console.log('dir', dir);
				    var stat = fs.statSync(filepath);
					var fdType='';
					if (stat.isDirectory()) {
						fdtype = 'folder';
						sortedFolderList.push({
							fdId: idx++,
							fdLv: 0,
							fdNm: dir,
							fdTp: fdType
						});
					} else {
						fdType='file';	
					}
                    console.log('sortedFolderList', sortedFolderList.length);
                }
                drawPopHtmlMain('#folderListUL');
            });

        }

        function showYakuTree() {
            $("#sdk").yakutree({
                unique: false,
                animate: true,
                duration: 100,
                aTagClick: true,
                btnAllExpand: '.expend',
                btnAllColspand: '.colspend',
                btnFirst: '.btnFirst',
                btnLast: '.btnLast',
                btnUp: '.btnUp',
                btnDown: '.btnDown',
                btnAdd: '.btnAdd',
                btnDel: '.btnDel',
                dragndrop: false,
                btnCallback: function(type, $source, $target) {
                    switch (type) {
                        case 'moveUp':
                            //this.moveAnimation(  $source, $target, 'revert' );
                            break;
                    }
                }
            });

        }

        //Html folder Draw : main		
        function drawPopHtmlMain(mPlaceHolder) {
            console.log('mPlaceHolder:', mPlaceHolder, 'sortedFolderList.length:', sortedFolderList.length);
            var htmlLi = null;
            var currFdId = 0;
            var currFdLv = 0;
            var prevFdLv = 0;
            var isLast = false; //클래스 tree_last 적용여부
            var hasChild = false;
            for (var ix = 0; ix < sortedFolderList.length; ix++) {
                currFdId = sortedFolderList[ix].fdId;
                currFdLv = sortedFolderList[ix].fdLv;
                isLast = isLastElemAtSameLv(ix, sortedFolderList[ix].fdFid, sortedFolderList[ix].fdLv);
                hasChild = hasChildAtCurrFdId(currFdId);
                htmlLi = getFolderElemHtml_nested(sortedFolderList[ix], isLast, hasChild);
                console.log('htmlLi:', htmlLi);

                if (ix == 0) { //시작점은 그냥 append
                    $(mPlaceHolder).append(htmlLi);
                } else if (currFdLv == 0) { //currFdLv == prevFdLv && 
                    $(mPlaceHolder).append(htmlLi); //최상위에 li를 붙인다.
                    if (gDebug) console.log('currFdLv 0 eq:', currFdLv, sortedFolderList[ix].fdNm);
                } else if (currFdLv > prevFdLv) {
                    var htmlUl = document.createElement('ul');
                    $(htmlUl).append(htmlLi);
                    $(mPlaceHolder).find('li').last().append(htmlUl); //가장 최근만든 li안에 ul만들고 li를 넣는다.
                    //                if(gDebug)console.log('currFdLv more:', currFdLv, sortedFolderList[ix].fdNm);
                } else if (currFdLv < prevFdLv) {
                    $(mPlaceHolder).find('li[id=' + sortedFolderList[ix].fdFid + '] ul').eq(0).append(htmlLi); //부모fdId로 ul를 찾고  li를 넣는다.
                    //                if(gDebug)console.log('currFdLv less:', currFdLv, sortedFolderList[ix].fdNm);
                } else if (currFdLv == prevFdLv) {
                    $(mPlaceHolder).find('li[id=' + sortedFolderList[ix].fdFid + '] ul').eq(0).append(htmlLi); //부모fdId로 ul를 찾고  li를 넣는다.
                    //                if(gDebug)console.log('currFdLv eq:', currFdLv, sortedFolderList[ix].fdNm);
                }

                var nextLv = 0;
                if (sortedFolderList[ix + 1] != null) {
                    nextLv = sortedFolderList[ix + 1].fdLv;
                } //제일 마지막 노드 처리 , 제일 마지막이면 nextLv=0
                prevFdLv = sortedFolderList[ix].fdLv;
            } //ix:e
            return;
            //mFdFid를 부모폴더id로 하는 것이 있으면 true, 아니면 false
            function hasChildAtCurrFdId(mFdFid) { //nested
                for (var ix = 0; ix < sortedFolderList.length; ix++) {
                    if (sortedFolderList[ix].fdFid == mFdFid) {
                        return true;
                    }
                }
                return false;
            }
            //현재 Lv에서 부모id로 검색하여 다음것이 없으면 true 아니면 false
            //mIdxS: 시작idx, mFdFid:부모폴더id, mFdLv:폴더레벨
            function isLastElemAtSameLv(mIdxS, mFdFid, mFdLv) { //nested
                for (var ix = (mIdxS + 1); ix < sortedFolderList.length; ix++) {
                    if (sortedFolderList[ix].fdFid == mFdFid && sortedFolderList[ix].fdLv == mFdLv) {
                        return false;
                    }
                }
                return true;
            }

            function getFolderElemHtml_nested(mFolderVO) { //nested
                var mHtml = $('#liFolderElemHidden_yaku').children().clone();
                mHtml.attr('id', mFolderVO.fdId);
                mHtml.find('a').text(mFolderVO.fdNm);
                return mHtml;
            }
            //야쿠 tree를 적용한다.
            function applyYakuTree() { //nested  folderListUL
                $(mPlaceHolder).yakutree({
                    unique: false,
                    animate: true,
                    duration: 100,
                    aTagClick: true,
                    btnAllExpand: '.expend',
                    btnAllColspand: '.colspend',
                    btnFirst: '.btnFirst',
                    btnLast: '.btnLast',
                    btnUp: '.btnUp',
                    btnDown: '.btnDown',
                    btnAdd: '.btnAdd',
                    btnDel: '.btnDel',
                    dragndrop: false,
                    btnCallback: function(type, $source, $target) {
                        switch (type) {
                            case 'moveUp':
                                //this.moveAnimation(  $source, $target, 'revert' );
                                break;
                        }
                    }
                });
                return;
            }
        }
    </script>
</head>

<body>
    <h1>Hello World!</h1>

    <script>
        document.write('We are using node : ');
        document.write(process.versions.node);
        document.write(', Chrome :');
        document.write(process.versions.chrome);
        document.write(', and Electron :');
        document.write(process.versions.electron);
        document.write(', and Resolution :');
        document.write(window.innerWidth, 'x', window.innerHeight);
        document.write('<br/> Curr Working Dir :');
        document.write(process.cwd());
    </script>.



    <div id="category">
        <div class="directory">
            <div class="root"> 문서함 </div>
            <ul id="folderListUL">

            </ul>
        </div>
    </div>

    <ul id="liFolderElemHidden_yaku" style="display:none;">
        <li class="collection folder none_text_select" id="" style="margin-left:0px">
            <a href="#"></a>
        </li>
    </ul>

</body>

</html>